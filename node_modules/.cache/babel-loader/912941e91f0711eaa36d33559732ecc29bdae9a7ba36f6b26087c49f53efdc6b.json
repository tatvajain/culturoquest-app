{"ast":null,"code":"var _jsxFileName = \"/Users/tatvajain/Downloads/culturoquest-frontend/src/context/GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport stagesData from '../data/stagesData.json'; // We need the stage list\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(null);\nexport const useGame = () => {\n  _s();\n  return useContext(GameContext);\n};\n\n// --- New Logic: Define the QP needed to complete each stage ---\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst QP_PER_STAGE = 750;\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [questPoints, setQuestPoints] = useState(1000);\n  const [ownedItems, setOwnedItems] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(localStorage.getItem('userAvatar') || 'default');\n\n  // --- New State for Progression ---\n  // Tracks QP earned within the current stage\n  const [stageProgressQP, setStageProgressQP] = useState(0);\n  // Tracks the user's journey, starting at the beginning\n  const [userProgress, setUserProgress] = useState({\n    completedStages: [],\n    currentStage: stagesData.stages[0].id\n  });\n  const addPoints = amount => {\n    setQuestPoints(prevPoints => prevPoints + amount);\n\n    // --- New Logic: Check for stage completion ---\n    const newStageProgress = stageProgressQP + amount;\n    if (newStageProgress >= QP_PER_STAGE) {\n      // Find the index of the current stage\n      const currentStageIndex = stagesData.stages.findIndex(s => s.id === userProgress.currentStage);\n      const nextStage = stagesData.stages[currentStageIndex + 1];\n      if (nextStage) {\n        // If there's a next stage, update progress\n        setUserProgress(prev => ({\n          completedStages: [...prev.completedStages, prev.currentStage],\n          currentStage: nextStage.id\n        }));\n        setStageProgressQP(0); // Reset progress for the new stage\n      } else {\n        // Last stage completed!\n        setUserProgress(prev => ({\n          ...prev,\n          completedStages: [...prev.completedStages, prev.currentStage]\n        }));\n      }\n    } else {\n      setStageProgressQP(newStageProgress);\n    }\n  };\n  const buyItem = item => {/* ... (no changes) ... */};\n  const setAvatar = avatarId => {/* ... (no changes) ... */};\n  const value = {\n    questPoints,\n    addPoints,\n    ownedItems,\n    buyItem,\n    selectedAvatar,\n    setAvatar,\n    // --- Expose new progression data ---\n    userProgress,\n    stageProgressQP,\n    QP_PER_STAGE\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, this);\n};\n_s2(GameProvider, \"kIYg2TNI7xTFvyEOoSMwO/5ytTQ=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","stagesData","jsxDEV","_jsxDEV","GameContext","useGame","_s","QP_PER_STAGE","GameProvider","children","_s2","questPoints","setQuestPoints","ownedItems","setOwnedItems","selectedAvatar","setSelectedAvatar","localStorage","getItem","stageProgressQP","setStageProgressQP","userProgress","setUserProgress","completedStages","currentStage","stages","id","addPoints","amount","prevPoints","newStageProgress","currentStageIndex","findIndex","s","nextStage","prev","buyItem","item","setAvatar","avatarId","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tatvajain/Downloads/culturoquest-frontend/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport stagesData from '../data/stagesData.json'; // We need the stage list\n\nconst GameContext = createContext(null);\nexport const useGame = () => useContext(GameContext);\n\n// --- New Logic: Define the QP needed to complete each stage ---\nconst QP_PER_STAGE = 750;\n\nexport const GameProvider = ({ children }) => {\n  const [questPoints, setQuestPoints] = useState(1000);\n  const [ownedItems, setOwnedItems] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(localStorage.getItem('userAvatar') || 'default');\n\n  // --- New State for Progression ---\n  // Tracks QP earned within the current stage\n  const [stageProgressQP, setStageProgressQP] = useState(0); \n  // Tracks the user's journey, starting at the beginning\n  const [userProgress, setUserProgress] = useState({\n    completedStages: [],\n    currentStage: stagesData.stages[0].id\n  });\n\n  const addPoints = (amount) => {\n    setQuestPoints(prevPoints => prevPoints + amount);\n    \n    // --- New Logic: Check for stage completion ---\n    const newStageProgress = stageProgressQP + amount;\n    if (newStageProgress >= QP_PER_STAGE) {\n      // Find the index of the current stage\n      const currentStageIndex = stagesData.stages.findIndex(s => s.id === userProgress.currentStage);\n      const nextStage = stagesData.stages[currentStageIndex + 1];\n\n      if (nextStage) {\n        // If there's a next stage, update progress\n        setUserProgress(prev => ({\n          completedStages: [...prev.completedStages, prev.currentStage],\n          currentStage: nextStage.id\n        }));\n        setStageProgressQP(0); // Reset progress for the new stage\n      } else {\n        // Last stage completed!\n        setUserProgress(prev => ({\n          ...prev,\n          completedStages: [...prev.completedStages, prev.currentStage],\n        }));\n      }\n    } else {\n      setStageProgressQP(newStageProgress);\n    }\n  };\n  \n  const buyItem = (item) => { /* ... (no changes) ... */ };\n  const setAvatar = (avatarId) => { /* ... (no changes) ... */ };\n\n  const value = { \n    questPoints, \n    addPoints, \n    ownedItems, \n    buyItem, \n    selectedAvatar, \n    setAvatar,\n    // --- Expose new progression data ---\n    userProgress,\n    stageProgressQP,\n    QP_PER_STAGE\n  };\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}