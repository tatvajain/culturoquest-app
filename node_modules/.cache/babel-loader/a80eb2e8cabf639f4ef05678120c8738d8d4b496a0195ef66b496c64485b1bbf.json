{"ast":null,"code":"var _jsxFileName = \"/Users/tatvajain/Downloads/culturoquest-frontend/src/context/GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport stagesData from '../data/stagesData.json';\nimport mauryanSaga from '../data/mauryanEmpire.json';\nimport triviaSaga from '../data/culturalTrivia.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(null);\nexport const useGame = () => {\n  _s();\n  return useContext(GameContext);\n};\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst allSagasData = {\n  \"Ancient India: The Mauryan Age (BCE)\": mauryanSaga,\n  \"Indian Culture 101\": triviaSaga\n};\nconst getQuestionIdsForSaga = sagaTitle => {\n  const saga = allSagasData[sagaTitle];\n  if (!saga) return [];\n  let ids = [];\n  Object.values(saga.games).forEach(game => {\n    if (game.questionBank) {\n      game.questionBank.forEach(qSet => {\n        if (qSet.events) ids.push(...qSet.events.map(e => e.id));\n        if (qSet.rulers) ids.push(...qSet.rulers.map(r => r.id));\n        if (qSet.statements) ids.push(qSet.id);\n        if (qSet.options) ids.push(qSet.id);\n      });\n    }\n    if (game.riddles) ids.push(...game.riddles.map(r => r.id));\n  });\n  return [...new Set(ids)];\n};\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [questPoints, setQuestPoints] = useState(1000);\n  const [ownedItems, setOwnedItems] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(localStorage.getItem('userAvatar') || 'default');\n  const [correctlyAnsweredQIDs, setCorrectlyAnsweredQIDs] = useState(new Set());\n  const [userProgress, setUserProgress] = useState({\n    completedStages: [],\n    currentStage: stagesData.stages[0].id\n  });\n  useEffect(() => {\n    const currentStage = stagesData.stages.find(s => s.id === userProgress.currentStage);\n    if (!currentStage) return;\n    const relatedSagaTitle = currentStage.relatedSaga;\n    const allQuestionIdsInSaga = getQuestionIdsForSaga(relatedSagaTitle);\n    if (allQuestionIdsInSaga.length === 0) return;\n    const correctlyAnsweredInSaga = allQuestionIdsInSaga.filter(id => correctlyAnsweredQIDs.has(id));\n    const masteryPercentage = correctlyAnsweredInSaga.length / allQuestionIdsInSaga.length * 100;\n    if (masteryPercentage >= 60) {\n      const currentStageIndex = stagesData.stages.findIndex(s => s.id === userProgress.currentStage);\n      const nextStage = stagesData.stages[currentStageIndex + 1];\n      if (nextStage && !userProgress.completedStages.includes(userProgress.currentStage)) {\n        setUserProgress(prev => ({\n          completedStages: [...prev.completedStages, prev.currentStage],\n          currentStage: nextStage.id\n        }));\n      } else if (!nextStage && !userProgress.completedStages.includes(userProgress.currentStage)) {\n        setUserProgress(prev => ({\n          ...prev,\n          completedStages: [...prev.completedStages, prev.currentStage]\n        }));\n      }\n    }\n  }, [correctlyAnsweredQIDs, userProgress.currentStage]);\n  const addPoints = amount => {\n    setQuestPoints(prevPoints => prevPoints + amount);\n  };\n  const spendPoints = amount => {\n    if (questPoints >= amount) {\n      setQuestPoints(prevPoints => prevPoints - amount);\n      return true; // Purchase successful\n    }\n    return false; // Not enough points\n  };\n  const markQuestionCorrect = questionId => {\n    setCorrectlyAnsweredQIDs(prev => new Set(prev).add(questionId));\n  };\n  const buyItem = item => {\n    if (spendPoints(item.price)) {\n      setOwnedItems(prevOwned => [...prevOwned, item.id]);\n      return true;\n    }\n    return false;\n  };\n  const setAvatar = avatarId => {\n    localStorage.setItem('userAvatar', avatarId);\n    setSelectedAvatar(avatarId);\n  };\n  const value = {\n    questPoints,\n    addPoints,\n    spendPoints,\n    // Added this function back\n    ownedItems,\n    buyItem,\n    selectedAvatar,\n    setAvatar,\n    userProgress,\n    correctlyAnsweredQIDs,\n    markQuestionCorrect\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n};\n_s2(GameProvider, \"tK3ryeJGBe0s/GaF9lL4uD4rQEo=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","stagesData","mauryanSaga","triviaSaga","jsxDEV","_jsxDEV","GameContext","useGame","_s","allSagasData","getQuestionIdsForSaga","sagaTitle","saga","ids","Object","values","games","forEach","game","questionBank","qSet","events","push","map","e","id","rulers","r","statements","options","riddles","Set","GameProvider","children","_s2","questPoints","setQuestPoints","ownedItems","setOwnedItems","selectedAvatar","setSelectedAvatar","localStorage","getItem","correctlyAnsweredQIDs","setCorrectlyAnsweredQIDs","userProgress","setUserProgress","completedStages","currentStage","stages","find","s","relatedSagaTitle","relatedSaga","allQuestionIdsInSaga","length","correctlyAnsweredInSaga","filter","has","masteryPercentage","currentStageIndex","findIndex","nextStage","includes","prev","addPoints","amount","prevPoints","spendPoints","markQuestionCorrect","questionId","add","buyItem","item","price","prevOwned","setAvatar","avatarId","setItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tatvajain/Downloads/culturoquest-frontend/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport stagesData from '../data/stagesData.json';\nimport mauryanSaga from '../data/mauryanEmpire.json';\nimport triviaSaga from '../data/culturalTrivia.json';\n\nconst GameContext = createContext(null);\nexport const useGame = () => useContext(GameContext);\n\nconst allSagasData = {\n  \"Ancient India: The Mauryan Age (BCE)\": mauryanSaga,\n  \"Indian Culture 101\": triviaSaga\n};\n\nconst getQuestionIdsForSaga = (sagaTitle) => {\n    const saga = allSagasData[sagaTitle];\n    if (!saga) return [];\n    let ids = [];\n    Object.values(saga.games).forEach(game => {\n        if (game.questionBank) {\n            game.questionBank.forEach(qSet => {\n                if (qSet.events) ids.push(...qSet.events.map(e => e.id));\n                if (qSet.rulers) ids.push(...qSet.rulers.map(r => r.id));\n                if (qSet.statements) ids.push(qSet.id);\n                if (qSet.options) ids.push(qSet.id);\n            });\n        }\n        if (game.riddles) ids.push(...game.riddles.map(r => r.id));\n    });\n    return [...new Set(ids)];\n};\n\nexport const GameProvider = ({ children }) => {\n  const [questPoints, setQuestPoints] = useState(1000);\n  const [ownedItems, setOwnedItems] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(localStorage.getItem('userAvatar') || 'default');\n  const [correctlyAnsweredQIDs, setCorrectlyAnsweredQIDs] = useState(new Set());\n  const [userProgress, setUserProgress] = useState({\n    completedStages: [],\n    currentStage: stagesData.stages[0].id\n  });\n\n  useEffect(() => {\n    const currentStage = stagesData.stages.find(s => s.id === userProgress.currentStage);\n    if (!currentStage) return;\n    const relatedSagaTitle = currentStage.relatedSaga;\n    const allQuestionIdsInSaga = getQuestionIdsForSaga(relatedSagaTitle);\n    if (allQuestionIdsInSaga.length === 0) return;\n    const correctlyAnsweredInSaga = allQuestionIdsInSaga.filter(id => correctlyAnsweredQIDs.has(id));\n    const masteryPercentage = (correctlyAnsweredInSaga.length / allQuestionIdsInSaga.length) * 100;\n\n    if (masteryPercentage >= 60) {\n      const currentStageIndex = stagesData.stages.findIndex(s => s.id === userProgress.currentStage);\n      const nextStage = stagesData.stages[currentStageIndex + 1];\n      if (nextStage && !userProgress.completedStages.includes(userProgress.currentStage)) {\n        setUserProgress(prev => ({\n          completedStages: [...prev.completedStages, prev.currentStage],\n          currentStage: nextStage.id\n        }));\n      } else if (!nextStage && !userProgress.completedStages.includes(userProgress.currentStage)) {\n        setUserProgress(prev => ({\n          ...prev,\n          completedStages: [...prev.completedStages, prev.currentStage],\n        }));\n      }\n    }\n  }, [correctlyAnsweredQIDs, userProgress.currentStage]);\n\n  const addPoints = (amount) => {\n    setQuestPoints(prevPoints => prevPoints + amount);\n  };\n\n  const spendPoints = (amount) => {\n    if (questPoints >= amount) {\n      setQuestPoints(prevPoints => prevPoints - amount);\n      return true; // Purchase successful\n    }\n    return false; // Not enough points\n  };\n\n  const markQuestionCorrect = (questionId) => {\n    setCorrectlyAnsweredQIDs(prev => new Set(prev).add(questionId));\n  };\n  \n  const buyItem = (item) => {\n    if (spendPoints(item.price)) {\n      setOwnedItems(prevOwned => [...prevOwned, item.id]);\n      return true;\n    }\n    return false;\n  };\n\n  const setAvatar = (avatarId) => {\n    localStorage.setItem('userAvatar', avatarId);\n    setSelectedAvatar(avatarId);\n  };\n\n  const value = { \n    questPoints, \n    addPoints,\n    spendPoints, // Added this function back\n    ownedItems, \n    buyItem, \n    selectedAvatar, \n    setAvatar,\n    userProgress,\n    correctlyAnsweredQIDs,\n    markQuestionCorrect\n  };\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}