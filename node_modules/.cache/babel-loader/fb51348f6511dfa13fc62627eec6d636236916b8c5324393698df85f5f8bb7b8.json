{"ast":null,"code":"var _jsxFileName = \"/Users/tatvajain/Downloads/culturoquest-frontend/src/context/GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport stagesData from '../data/stagesData.json';\nimport mauryanSaga from '../data/mauryanEmpire.json';\nimport triviaSaga from '../data/culturalTrivia.json';\nimport achievementData from '../data/achievements.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(null);\nexport const useGame = () => {\n  _s();\n  return useContext(GameContext);\n};\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst allSagasData = {\n  \"ancient-india-bce\": mauryanSaga,\n  \"indian-culture-101\": triviaSaga\n};\nconst getQuestionIdsForSaga = sagaId => {\n  const saga = allSagasData[sagaId];\n  if (!saga) return [];\n  let ids = [];\n  Object.values(saga.games).forEach(game => {\n    if (game.questionBank) {\n      game.questionBank.forEach(qSet => {\n        if (qSet.events) ids.push(...qSet.events.map(e => e.id));\n        if (qSet.rulers) ids.push(...qSet.rulers.map(r => r.id));\n        if (qSet.statements) ids.push(qSet.id);\n        if (qSet.item) ids.push(qSet.id);\n        if (qSet.imageUrl) ids.push(qSet.id);\n      });\n    }\n    if (game.riddles) ids.push(...game.riddles.map(r => r.id));\n  });\n  return [...new Set(ids)];\n};\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [questPoints, setQuestPoints] = useState(1000);\n  const [ownedItems, setOwnedItems] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(localStorage.getItem('userAvatar') || 'default');\n  const [correctlyAnsweredQIDs, setCorrectlyAnsweredQIDs] = useState(new Set());\n  const [userProgress, setUserProgress] = useState({\n    completedStages: new Set(),\n    activeStages: new Set([stagesData.stages.find(s => s.id.startsWith('history_')).id, stagesData.stages.find(s => s.id.startsWith('culture_')).id])\n  });\n  const [unlockedAchievements, setUnlockedAchievements] = useState(new Set());\n  useEffect(() => {\n    const newActiveStages = new Set(userProgress.activeStages);\n    const newCompletedStages = new Set(userProgress.completedStages);\n    let progressionChanged = false;\n    userProgress.activeStages.forEach(activeStageId => {\n      const stage = stagesData.stages.find(s => s.id === activeStageId);\n      if (!stage || newCompletedStages.has(activeStageId)) return;\n      const relatedSagaId = stage.relatedSaga;\n      const allQuestionIdsInSaga = getQuestionIdsForSaga(relatedSagaId);\n      if (allQuestionIdsInSaga.length === 0) return;\n      const correctlyAnsweredInSaga = allQuestionIdsInSaga.filter(id => correctlyAnsweredQIDs.has(id));\n      const masteryPercentage = correctlyAnsweredInSaga.length / allQuestionIdsInSaga.length * 100;\n      if (masteryPercentage >= 60) {\n        newCompletedStages.add(activeStageId);\n        newActiveStages.delete(activeStageId);\n        const currentStageIndex = stagesData.stages.findIndex(s => s.id === activeStageId);\n        const nextStage = stagesData.stages[currentStageIndex + 1];\n        if (nextStage && nextStage.id.split('_')[0] === activeStageId.split('_')[0]) {\n          newActiveStages.add(nextStage.id);\n        }\n        progressionChanged = true;\n      }\n    });\n    if (progressionChanged) {\n      setUserProgress({\n        completedStages: newCompletedStages,\n        activeStages: newActiveStages\n      });\n    }\n  }, [correctlyAnsweredQIDs, userProgress.activeStages]);\n  useEffect(() => {\n    const historyStages = stagesData.stages.filter(s => s.relatedSaga === \"ancient-india-bce\").map(s => s.id);\n    if (historyStages.every(id => userProgress.completedStages.has(id))) {\n      setUnlockedAchievements(prev => new Set(prev).add('mauryan_scholar'));\n    }\n    const cultureStages = stagesData.stages.filter(s => s.relatedSaga === \"indian-culture-101\").map(s => s.id);\n    if (cultureStages.every(id => userProgress.completedStages.has(id))) {\n      setUnlockedAchievements(prev => new Set(prev).add('cultural_connoisseur'));\n    }\n  }, [userProgress.completedStages]);\n  const addPoints = amount => {\n    setQuestPoints(p => p + amount);\n  };\n  const spendPoints = amount => {\n    if (questPoints >= amount) {\n      setQuestPoints(prevPoints => prevPoints - amount);\n      return true;\n    }\n    return false;\n  };\n  const markQuestionCorrect = id => {\n    if (correctlyAnsweredQIDs.size === 0) {\n      setUnlockedAchievements(prev => new Set(prev).add('quest_novice'));\n    }\n    setCorrectlyAnsweredQIDs(prev => new Set(prev).add(id));\n  };\n  const buyItem = item => {\n    if (spendPoints(item.price)) {\n      setOwnedItems(prevOwned => [...prevOwned, item.id]);\n      return true;\n    }\n    return false;\n  };\n  const setAvatar = id => {\n    localStorage.setItem('userAvatar', id);\n    setSelectedAvatar(id);\n  };\n  const value = {\n    questPoints,\n    addPoints,\n    spendPoints,\n    ownedItems,\n    buyItem,\n    selectedAvatar,\n    setAvatar,\n    userProgress,\n    correctlyAnsweredQIDs,\n    markQuestionCorrect,\n    getQuestionIdsForSaga,\n    unlockedAchievements\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 10\n  }, this);\n};\n_s2(GameProvider, \"8umIKaHG7AA0hq1ayDzIWlmEe/M=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","stagesData","mauryanSaga","triviaSaga","achievementData","jsxDEV","_jsxDEV","GameContext","useGame","_s","allSagasData","getQuestionIdsForSaga","sagaId","saga","ids","Object","values","games","forEach","game","questionBank","qSet","events","push","map","e","id","rulers","r","statements","item","imageUrl","riddles","Set","GameProvider","children","_s2","questPoints","setQuestPoints","ownedItems","setOwnedItems","selectedAvatar","setSelectedAvatar","localStorage","getItem","correctlyAnsweredQIDs","setCorrectlyAnsweredQIDs","userProgress","setUserProgress","completedStages","activeStages","stages","find","s","startsWith","unlockedAchievements","setUnlockedAchievements","newActiveStages","newCompletedStages","progressionChanged","activeStageId","stage","has","relatedSagaId","relatedSaga","allQuestionIdsInSaga","length","correctlyAnsweredInSaga","filter","masteryPercentage","add","delete","currentStageIndex","findIndex","nextStage","split","historyStages","every","prev","cultureStages","addPoints","amount","p","spendPoints","prevPoints","markQuestionCorrect","size","buyItem","price","prevOwned","setAvatar","setItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tatvajain/Downloads/culturoquest-frontend/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport stagesData from '../data/stagesData.json';\nimport mauryanSaga from '../data/mauryanEmpire.json';\nimport triviaSaga from '../data/culturalTrivia.json';\nimport achievementData from '../data/achievements.json';\n\nconst GameContext = createContext(null);\nexport const useGame = () => useContext(GameContext);\n\nconst allSagasData = {\n  \"ancient-india-bce\": mauryanSaga,\n  \"indian-culture-101\": triviaSaga\n};\n\nconst getQuestionIdsForSaga = (sagaId) => {\n    const saga = allSagasData[sagaId];\n    if (!saga) return [];\n    let ids = [];\n    Object.values(saga.games).forEach(game => {\n        if (game.questionBank) {\n            game.questionBank.forEach(qSet => {\n                if (qSet.events) ids.push(...qSet.events.map(e => e.id));\n                if (qSet.rulers) ids.push(...qSet.rulers.map(r => r.id));\n                if (qSet.statements) ids.push(qSet.id);\n                if (qSet.item) ids.push(qSet.id);\n                if (qSet.imageUrl) ids.push(qSet.id);\n            });\n        }\n        if (game.riddles) ids.push(...game.riddles.map(r => r.id));\n    });\n    return [...new Set(ids)];\n};\n\nexport const GameProvider = ({ children }) => {\n  const [questPoints, setQuestPoints] = useState(1000);\n  const [ownedItems, setOwnedItems] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(localStorage.getItem('userAvatar') || 'default');\n  const [correctlyAnsweredQIDs, setCorrectlyAnsweredQIDs] = useState(new Set());\n  \n  const [userProgress, setUserProgress] = useState({\n    completedStages: new Set(),\n    activeStages: new Set([\n        stagesData.stages.find(s => s.id.startsWith('history_')).id,\n        stagesData.stages.find(s => s.id.startsWith('culture_')).id\n    ])\n  });\n\n  const [unlockedAchievements, setUnlockedAchievements] = useState(new Set());\n\n  useEffect(() => {\n    const newActiveStages = new Set(userProgress.activeStages);\n    const newCompletedStages = new Set(userProgress.completedStages);\n    let progressionChanged = false;\n\n    userProgress.activeStages.forEach(activeStageId => {\n        const stage = stagesData.stages.find(s => s.id === activeStageId);\n        if (!stage || newCompletedStages.has(activeStageId)) return;\n\n        const relatedSagaId = stage.relatedSaga;\n        const allQuestionIdsInSaga = getQuestionIdsForSaga(relatedSagaId);\n        if (allQuestionIdsInSaga.length === 0) return;\n\n        const correctlyAnsweredInSaga = allQuestionIdsInSaga.filter(id => correctlyAnsweredQIDs.has(id));\n        const masteryPercentage = (correctlyAnsweredInSaga.length / allQuestionIdsInSaga.length) * 100;\n\n        if (masteryPercentage >= 60) {\n            newCompletedStages.add(activeStageId);\n            newActiveStages.delete(activeStageId);\n            \n            const currentStageIndex = stagesData.stages.findIndex(s => s.id === activeStageId);\n            const nextStage = stagesData.stages[currentStageIndex + 1];\n\n            if (nextStage && nextStage.id.split('_')[0] === activeStageId.split('_')[0]) {\n                newActiveStages.add(nextStage.id);\n            }\n            progressionChanged = true;\n        }\n    });\n\n    if (progressionChanged) {\n        setUserProgress({\n            completedStages: newCompletedStages,\n            activeStages: newActiveStages\n        });\n    }\n\n  }, [correctlyAnsweredQIDs, userProgress.activeStages]);\n\n  useEffect(() => {\n    const historyStages = stagesData.stages.filter(s => s.relatedSaga === \"ancient-india-bce\").map(s => s.id);\n    if (historyStages.every(id => userProgress.completedStages.has(id))) {\n      setUnlockedAchievements(prev => new Set(prev).add('mauryan_scholar'));\n    }\n\n    const cultureStages = stagesData.stages.filter(s => s.relatedSaga === \"indian-culture-101\").map(s => s.id);\n    if (cultureStages.every(id => userProgress.completedStages.has(id))) {\n      setUnlockedAchievements(prev => new Set(prev).add('cultural_connoisseur'));\n    }\n  }, [userProgress.completedStages]);\n\n  const addPoints = (amount) => {\n    setQuestPoints(p => p + amount);\n  };\n\n  const spendPoints = (amount) => {\n    if (questPoints >= amount) {\n      setQuestPoints(prevPoints => prevPoints - amount);\n      return true;\n    }\n    return false;\n  };\n\n  const markQuestionCorrect = (id) => {\n    if (correctlyAnsweredQIDs.size === 0) {\n        setUnlockedAchievements(prev => new Set(prev).add('quest_novice'));\n    }\n    setCorrectlyAnsweredQIDs(prev => new Set(prev).add(id));\n  };\n\n  const buyItem = (item) => {\n    if (spendPoints(item.price)) {\n      setOwnedItems(prevOwned => [...prevOwned, item.id]);\n      return true;\n    }\n    return false;\n  };\n  \n  const setAvatar = (id) => {\n    localStorage.setItem('userAvatar', id);\n    setSelectedAvatar(id);\n  };\n\n  const value = { \n    questPoints, addPoints, spendPoints, ownedItems, buyItem, \n    selectedAvatar, setAvatar, userProgress, correctlyAnsweredQIDs, \n    markQuestionCorrect, getQuestionIdsForSaga, unlockedAchievements\n  };\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}